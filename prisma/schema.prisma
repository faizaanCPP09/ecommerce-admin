// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

//source code from vercel_postgres
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Store{
  id          String  @id @default(uuid())
  name        String
  userId      String
  billboards    Billboard[]  @relation("StoreToBillboard")
  categories    Category[]   @relation("StoreToCategory")
  sizes         Size[]       @relation("StoreToSize")
  colors        Color[]  @relation("StoreToColor")
  products      Product[]    @relation("StoreToProduct")
  orders        Order[]     @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

//Here we have to define like what billboard will be consisting..[structure]
//Billboard will only work for a selected store.[A store should be selected]
model Billboard{
  id      String    @id @default(uuid())
  storeId String
  store   Store     @relation("StoreToBillboard",fields: [storeId],references: [id])
  label   String
  imageUrl String
  categories Category[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([storeId])
}

//Here we have to define like what Category section will be consisting..[structure]
//category will only work for a selected store and selected billboard.[A store should be selected]
model Category{
  id    String @id @default(uuid())
  storeId String
  store   Store   @relation("StoreToCategory",fields: [storeId],references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId],references: [id])
  name  String
  products    Product[]   @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

//Here we have to define like what Size section will be consisting..[structure]
model Size {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToSize",fields: [storeId],references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

//Here we have to define like what Color section will be consisting..[structure]
model Color {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToColor",fields: [storeId],references: [id])
  name String
  value String
  products Product[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

//Here we have to define like what Product section will be consisting..[structure]

model Product {
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToProduct",fields: [storeId],references: [id])
  categoryId String
  category Category @relation("CategoryToProduct",fields: [categoryId],references: [id])
  name String
  price Decimal
  isFeatured Boolean  @default(false)
  isArchive   Boolean @default(false)
  sizeId  String
  size    Size     @relation(fields: [sizeId],references: [id])
  colorId String
  color   Color   @relation(fields: [colorId],references: [id])
  images    Image[]
  orderItems  OrderItem[]
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image{
  id String   @id   @default(uuid())
  productId   String
  product   Product   @relation(fields: [productId],references: [id] , onDelete: Cascade)
  url   String
  createdAt   DateTime  @default(now())
  updateAt    DateTime  @updatedAt

  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("StoreToOrder",fields: [storeId],references: [id])
  orderItems OrderItem[]
  isPaid  Boolean @default(false)
  phone String  @default("")
  address String @default("")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId], references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])

  @@index([orderId])
  @@index([productId])
}
